Letters()
Letters
letters
letters[c(27-9, 27-26, 27-7)]
letters[c(27-4, 27-12, 27-15, 27-21)]
letters[c(27-25, 27-26, 27-24, 27-16)]
letters[c(27-21, 27-26, 27-13, 27-13, 27-16)]
letters[c(27-21, 27-26, 27-13, 27-13, 27-25)]
letters[c(27-21, 27-26, 27-13, 27-13, 27-22)]
letters[c(27-21, 27-26, 27-13, 27-13, 27-2)]
letters[c(27-20, 27-19, 27-5, 27-1, 27-2)]
library(tidyverse)
library(raster)
load(url("https://github.com/OliPerkins1987/Fire_GBM/raw/main/Working_mod_JM.RData"))
Compete.AFT <- function(AFT.list, threshold = 0.1) {
AFT.list   <- lapply(AFT.list, function(x) {x[x[] < threshold] <- 0
return(x)})
AFT.ref    <- sum(unlist(brick(AFT.list)))
AFT.compete<- lapply(AFT.list, function(x) x/AFT.ref)
AFT.compete
}
Cropland.compete  <- Compete.AFT(AFT.list = Ymod$Cropland)
lapply(Cropland.compete, function(x) (plot(x, zlim = c(0, 1))))
Cropland_dominant <- raster::which.max(brick(unlist(Cropland.compete)))
plot(Cropland_dominant * (CMIP6_Cropland > 0.05), col=colorRampPalette(c("white", "green", "yellow", "blue"))(255))
plot(Cropland_dominant * (CMIP6_Cropland_2016 > 0.05), col=colorRampPalette(c("white", "green", "yellow", "blue"))(255))
names(Ymod)
library(tidyverse)
library(raster)
load(url("https://github.com/OliPerkins1987/Fire_GBM/raw/main/Working_mod_JM.RData"))
Cropland.compete  <- Compete.AFT(AFT.list = Ymod$Cropland)
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Nonex/Unoc')
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Nonex/Unoc')
for(i in 1:26) {
preds.frame           <- data.frame(MA.Synthetic[[i]][])
colnames(preds.frame) <- c('Market_access')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('Unoc_', i, '.tif' ), overwrite = TRUE)
}
load("~/PhD/Model development/AFT Distribution/Beta version/Submodels/Rdata/Nonex/NewMA/Unoccupied_Mod_Revised.RData")
### Code by Oli Perkins Jan 2021
### Analysis of DAFI to support definition & refining of AFTs
library(tidyverse)
library(ggplot2)
library(viridisLite)
library(maps)
library(readxl)
library(tree)
library(rpart)
library(caret)
library(raster)
library(rgdal)
library(ncdf4)
set.seed(1987)
gc()
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Nonex/Unoc')
for(i in 1:26) {
preds.frame           <- data.frame(MA.Synthetic[[i]][])
colnames(preds.frame) <- c('Market_access')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('Unoc_', i, '.tif' ), overwrite = TRUE)
}
gc()
load("~/PhD/Model development/AFT Distribution/Beta version/Submodels/Rdata/Nonex/Industrial_Mod.RData")
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Nonex/Intense')
plot(Final.tree)
text(Final.tree)
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Nonex/Intense')
for(i in 1:26) {
ET.key <- ifelse(i < 26, i, 25)
preds.frame           <- data.frame(HDI[[i]][], ET[[ET.key]][])
colnames(preds.frame) <- c('HDI', 'ET')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('Intense_', i+1989, '.tif' ), overwrite = TRUE)
}
showTmpFiles()
removeTmpFiles()
gc()
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Xaxis/All years/Nonex')
load("~/PhD/Model development/AFT Distribution/Beta version/Xaxis/Non_ex_AFT_Mod.RData")
### Code by Oli Perkins Jan 2021
### Analysis of DAFI to support definition & refining of AFTs
library(tidyverse)
library(ggplot2)
library(viridisLite)
library(maps)
library(readxl)
library(tree)
library(rpart)
library(caret)
library(raster)
library(rgdal)
library(ncdf4)
set.seed(1987)
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Xaxis/All years/Nonex')
for(i in 1:26) {
HDI_GDP          <- HDI[[i]]*log(GDP[[i]])
preds.frame           <- data.frame(HDI[[i]][], DEM[], HDI_GDP[])
colnames(preds.frame) <- c('HDI', 'DEM', 'HDI_GDP')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('Nonex_', i+1989, '.tif' ), overwrite = TRUE)
}
load("~/PhD/Model development/AFT Distribution/Beta version/Submodels/Pasture/JULES PFTS v6 Revised_Intensive.R")
load("~/PhD/Model development/AFT Distribution/Beta version/Submodels/Rdata/Pasture/NewMA/Intensive_Livestock_Mod_revised.RData")
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Pasture/Intense')
NPP.smooth <- NPP
for(i in 1:26) {
if(i < 11) {
NPP.smooth[[i]] <- mean(NPP[[1:i]])
} else {
NPP.smooth[[i]] <- mean(NPP[[(i-10):i]])
}
}
### Code by Oli Perkins Jan 2021
### Analysis of DAFI to support definition & refining of AFTs
library(tidyverse)
library(ggplot2)
library(viridisLite)
library(maps)
library(readxl)
library(tree)
library(rpart)
library(caret)
library(raster)
library(rgdal)
library(ncdf4)
set.seed(1987)
NPP.smooth <- NPP
for(i in 1:31) {
if(i < 11) {
NPP.smooth[[i]] <- mean(NPP[[1:i]])
} else {
NPP.smooth[[i]] <- mean(NPP[[(i-10):i]])
}
}
NPP.smooth <- NPP
for(i in 1:31) {
if(i < 11) {
NPP.smooth[[i]] <- mean(NPP[1:i])
} else {
NPP.smooth[[i]] <- mean(NPP[(i-10):i])
}
}
warnings()
NPP.smooth[[1]]
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Pasture/Intense')
NPP.smooth <- NPP
NPP.smooth <- NPP
for(i in 1:31) {
if(i < 11) {
NPP.smooth[[i]] <- mean(brick(unlist(NPP[1:i])))
} else {
NPP.smooth[[i]] <- mean(brick(unlist(NPP[(i-10):i])))
}
}
NPP.smooth[[11]]
NPP[[11]]
plot(NPP[[1]])
plot(NPP[[11]])
plot(NPP.smooth[[11]])
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Pasture/Intense')
for(i in 1:26) {
Mountainous <- GDP[[i]] * (1/TRI)
preds.frame           <- data.frame(NPP.smooth[[i]][], Mountainous[])
colnames(preds.frame) <- c('NPP', 'Mountainous')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('Intensive_', i, '.tif' ), overwrite = TRUE)
}
load("~/PhD/Model development/AFT Distribution/Beta version/Submodels/Rdata/Forestry/Forestry_Small_Mod.RData")
### Code by Oli Perkins Jan 2021
### Analysis of DAFI to support definition & refining of AFTs
library(tidyverse)
library(ggplot2)
library(viridisLite)
library(maps)
library(readxl)
library(tree)
library(rpart)
library(caret)
library(raster)
library(rgdal)
library(ncdf4)
set.seed(1987)
###############################
source('C:/Users/Oli/Documents/PhD/Model development/DAFI Analysis/Utility/General_functions_v5_3_07122020.R')
source('C:/Users/Oli/Documents/PhD/Model development/DAFI Analysis/Utility/Data_visualisation_v2_17122020.R')
source('C:/Users/Oli/Documents/PhD/Model development/DAFI Analysis/Utility/Compress_database_v1_30112020.R')
source('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Code/AFT_Dist_functions.R')
source('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/AFT_Distribution_Functions.R')
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Forestry/Trans')
NPP.smooth <- NPP
for(i in 1:31) {
if(i < 11) {
NPP.smooth[[i]] <- mean(NPP[[1:i]])
} else {
NPP.smooth[[i]] <- mean(NPP[[(i-10):i]])
}
}
for(i in 1:26) {
HDI_GDP          <- HDI[[i]]*log(GDP[[i]])
preds.frame           <- data.frame(HDI_GDP[], Market_influence[], NPP.smooth[[i]][])
colnames(preds.frame) <- c('HDI_GDP', 'TRI', 'NPP')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('Transition_', i, '.tif' ), overwrite = TRUE)
}
load("~/PhD/Model development/AFT Distribution/Beta version/Submodels/Rdata/Forestry/NewMA/Hunter_gatherer_mod.RData")
setwd('C:/Users/Oli/Documents/PhD/Model development/AFT Distribution/Beta version/Submodels/Maps/All years/Forestry/HG')
ET.smooth <- ET
for(i in 1:25) {
if(i < 11) {
ET.smooth[[i]] <- mean(ET[[1:i]])
} else {
ET.smooth[[i]] <- mean(ET[[(i-10):i]])
}
}
for(i in 1:26) {
Market_influence <- MA[[i]]*GDP[[i]]
HDI_GDP <- HDI[[i]]*log(GDP[[i]])
Pop.key <- ifelse(i < 11, 1,
ifelse(i < 16, 2,
ifelse(i < 21, 3,
ifelse(i < 26, 4, 5))))
preds.frame           <- data.frame(HDI_GDP[], Population[[Pop.key]][], ET[[i]][], Market_influence[])
colnames(preds.frame) <- c('HDI_GDP', 'Pop_dense', 'ET', 'Market.influence')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('HandG_', i, '.tif' ), overwrite = TRUE)
}
ET.smooth <- ET
for(i in 1:25) {
if(i < 11) {
ET.smooth[[i]] <- mean(ET[[1:i]])
} else {
ET.smooth[[i]] <- mean(ET[[(i-10):i]])
}
}
for(i in 1:26) {
Market_influence <- MA[[i]]*GDP[[i]]
HDI_GDP <- HDI[[i]]*log(GDP[[i]])
Pop.key <- ifelse(i < 11, 1,
ifelse(i < 16, 2,
ifelse(i < 21, 3,
ifelse(i < 26, 4, 5))))
preds.frame           <- data.frame(HDI_GDP[], Population[[Pop.key]][], ET.smooth[[i]][], Market_influence[])
colnames(preds.frame) <- c('HDI_GDP', 'Pop_dense', 'ET', 'Market.influence')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('HandG_', i, '.tif' ), overwrite = TRUE)
}
i
preds.frame           <- data.frame(HDI_GDP[], Population[[Pop.key]][], ET.smooth[[25]][], Market_influence[])
colnames(preds.frame) <- c('HDI_GDP', 'Pop_dense', 'ET', 'Market.influence')
combined.rast <- Compile.map()
plot(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95))
writeRaster(calc(brick(unlist(combined.rast$Combined)), mean) * (JULES.mask > 0.05) * (JULES.icemask < 0.95),
paste0('HandG_', i, '.tif' ), overwrite = TRUE)
Final.tree$frame
stage.tree$frame
setwd('C:/Users/Oli/Documents/PhD/MAFIA/Input data/Trees')
teg <- Final.tree$frame
teg
write.csv(teg, 'HG_tree.csv')
write.csv(Combo.dat, 'HD_dat.csv', row.names = F)
